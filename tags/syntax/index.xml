<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Syntax on Code Koala</title>
    <link>https://udarabibile.github.io/codekoala.dev/tags/syntax/</link>
    <description>Recent content in Syntax on Code Koala</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Tue, 24 Sep 2019 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://udarabibile.github.io/codekoala.dev/tags/syntax/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SQL Snippet: Foreign Keys</title>
      <link>https://udarabibile.github.io/codekoala.dev/blog/sql-snippet-foreign-keys/</link>
      <pubDate>Tue, 24 Sep 2019 00:00:00 +0000</pubDate>
      <guid>https://udarabibile.github.io/codekoala.dev/blog/sql-snippet-foreign-keys/</guid>
      <description>If you have worked with SQL based database, I guess y’all are familiar with usage of foreign keys to manage relationship between tables.&#xA;Relationship Types Lets dive into a famous example involving book — author connection to gain insight. There are variety of connection between these entities, in a graphical:&#xA;one to one →an author can write only one book, and a book only have one author. one to many →an author can write multiple books, but book can only have one author.</description>
    </item>
    <item>
      <title>Introduction to React Context API</title>
      <link>https://udarabibile.github.io/codekoala.dev/blog/introduction-to-react-context-api/</link>
      <pubDate>Sat, 20 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://udarabibile.github.io/codekoala.dev/blog/introduction-to-react-context-api/</guid>
      <description>From React’s version 16.3.0, Context API is officially released to avoid props drilling to child components.&#xA;In order to understand use of React context and its application, lets look into what complication its trying to fix.&#xA;import React from &amp;#39;react&amp;#39;; const App = () =&amp;gt; { return &amp;lt;Menu colour=&amp;#34;blue&amp;#34; language=&amp;#34;en&amp;#34; /&amp;gt;; } function Menu(props) { return( &amp;lt;MenuItem colour={props.colour} language={props.language} /&amp;gt; ) } function MenuItem(props) { return( &amp;lt;div&amp;gt; &amp;lt;p&amp;gt;Theme colour: {props.colour}&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;Locale: {props.</description>
    </item>
    <item>
      <title>Introduction to React Hooks</title>
      <link>https://udarabibile.github.io/codekoala.dev/blog/introduction-to-react-hooks/</link>
      <pubDate>Fri, 19 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://udarabibile.github.io/codekoala.dev/blog/introduction-to-react-hooks/</guid>
      <description>From React’s version 16.8.0, Hooks are introduced to make functional components more useful.&#xA;TODO: MAKE MORE WIDTH&#xA;In React, class components are stateful and smart, being state is attached to it and kept persistent through renders. Then functional components were stateless and dumb components, having nor state nor logic attached to it.&#xA;As an example, class component can have state, and it could be manipulated using lifecycle methods such as constructor, componentDidMount and such.</description>
    </item>
  </channel>
</rss>
